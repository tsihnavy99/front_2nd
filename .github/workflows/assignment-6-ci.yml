name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: job1 run build
        run: pnpm -F assignment-6 build > error.log 2>&1

      - name: job1 error comment
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const errorLog = fs.readFileSync('error.log', 'utf8')

            const message = `## Build Error\n\n${errorLog}`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: job2 run lint
        run: |
          pnpm -F assignment-6 lint > lint_output.log 2>&1

      - name: job2 error comment
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('lint_output.log', 'utf8')

            const message = `## ESLint Results\n\n${report}`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install coverage
        run: pnpm add --save-dev @vitest/coverage-v8@2.0.2 --filter assignment-6

      - name: job3 run test
        run: pnpm -F assignment-6 test -- --coverage.enabled true --coverage.reporter=json-summary

      - name: job3 coverage comment
        if: always()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const title = {'lines': '라인', 'statements': '구문', 'functions': '함수', 'branches': '브랜치'}
            let message = ''

            try {
              const path = require('path')
              const coveragePath = path.join(process.cwd(), 'packages/assignment-6/coverage', 'coverage-summary.json')

              const fs = require('fs')
              const result = fs.readFileSync(coveragePath, 'utf8')
              const report = JSON.parse(result)

              message = Object.entries(report.total).reduce((prev, [key, value]) => {
                if(!title[key]) return prev
                return (prev += `- ${title[key]} 커버리지: ${value.pct}%\n`)
              }, "## 테스트 성공 :white_check_mark:\n\n### 커버리지 결과\n\n")
            } catch (e) {
              message = "## 테스트 실패 :x:\n\n### 출력할 결과가 없습니다."
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install packages
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Fail to Run Lighthouse CI!"

      - name: job4 lighthouse comment
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const path = require('path')
            const coveragePath = path.join(process.cwd(), 'packages/assignment-6/temporary-public-storage', 'manigest.json')

            const fs = require('fs')
            const results = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            let message = "";

            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const { audits } = details;

              const details = JSON.parse(fs.readFileSync(jsonPath));
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              message = [
                `## Lighthouse 성능 측정 결과`,
                `| 카테고리 | 점수 |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                { ... }
              ].join("\n");
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  assign_reviewer:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select random reviewer
        id: random
        run: |
          REVIEWERS=("kimfield98" "steve-shim")
          SELECTED=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          echo "REVIEWER=$SELECTED" >> $GITHUB_OUTPUT

      - name: Assign reviewer
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const reviewer = '${{ steps.random.outputs.REVIEWER }}';
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [reviewer]
            });

      - name: Comment on PR
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const reviewer = '${{ steps.random.outputs.REVIEWER }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${reviewer} has been randomly selected as the reviewer for this PR.`
            });
